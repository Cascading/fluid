/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

// set up shadow plugin
configurations {
  shaded
  shadedArchives
}

buildscript {
  repositories { jcenter() }

  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.1'
  }
}
import com.github.jengelman.gradle.plugins.shadow.ShadowPlugin
apply plugin: ShadowPlugin


evaluationDependsOn( ':fluid-generator' )

def generatedSrc = "$buildDir/generated-src"


def unzipToTemp( File jar )
{
  File folder = Files.createTempDirectory( "temp" ).toFile();
  ZipInputStream zis = new ZipInputStream( new FileInputStream( jar ) );
  ZipEntry ze = zis.getNextEntry();

  while( ze != null )
  {
    String fileName = ze.getName();

    File newFile = new File( folder, fileName );
    newFile.getParentFile().mkdirs();

    // only process files
    if( !ze.isDirectory() )
    {
      int len;
      byte[] buffer = new byte[1024];
      FileOutputStream fos = new FileOutputStream( newFile );

      while( ( len = zis.read( buffer ) ) > 0 )
      {
        fos.write( buffer, 0, len );
      }

      fos.close();
    }

    ze = zis.getNextEntry();
  }

  zis.closeEntry();
  zis.close();
  return folder
}


task fluidGenerator() {
  dependsOn << project( ':fluid-generator' ).classes

  // set up source jar input
  ext.sourcesDir = ""

  file = project.configurations.runtime.find {
    it.name.startsWith( "cascading-core" ) && it.name.endsWith( "-sources.jar" )
  }

  if( file != null )
  {
    ext.sourcesDir = unzipToTemp( file ).getPath()
  }

  ext.outputDir = generatedSrc; // allows us to set a differing version of Cascading
  ext.include = sourceSets.main.compileClasspath;

  doLast {

    def path = include.asPath

    file( outputDir ).mkdirs()

    javaexec {
      classpath = project( ':fluid-generator' ).sourceSets.main.runtimeClasspath
      main = 'cascading.fluid.generator.Main'
      args = [sourcesDir, outputDir, path]
    }
  }
}
compileJava {
  dependsOn << fluidGenerator
  source file( generatedSrc )
}

javadoc {
  source = sourceSets.main.allJava + files( generatedSrc )
  excludes = ["unquietcode"]
  classpath += configurations.provided
}

sourcesJar() {
  from sourceSets.main.allSource + files( generatedSrc )
}

// build the shaded jar
shadowJar {
  dependsOn << compileJava
  classifier = ''
  baseName = "${project.name}-shaded"

  from configurations.all.shaded

  mergeServiceFiles()
  relocate 'org.reflections', 'cascading.reflections'
  relocate 'javassist', 'cascading.javassist'
  relocate 'com.google.common', 'cascading.google.common'

  exclude 'LICENSE'
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/LICENSE*'
}
assemble.dependsOn << shadowJar

artifacts {
  shadedArchives shadowJar
}

// maven install for shaded jar
task installShadedArchives(type: Upload) {
  dependsOn << shadowJar
  def artifactName = "${project.name}-shaded"

  def installer = repositories.mavenInstaller {
    configuration = configurations.shadedArchives

    pom.project {
      description 'An API for data management, analytics, and machine learning on parallel computing clusters.'
      inceptionYear '2014'
      url 'http://cascading.org/'
      scm {
        url 'https://github.com/Cascading/fluid.git'
      }
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }

      artifactId = artifactName
    }
  }

  installer.pom.whenConfigured { pom ->
    pom.dependencies.removeAll { true }
  }
}
install.dependsOn(installShadedArchives)


// maven deploy for shaded jar
uploadShadow {
  def artifactName = "${project.name}-shaded"

  def deployer = repositories.mavenDeployer {
    configuration = configurations.shadedArchives

    repository( url: repoUrl ) {
      authentication( userName: repoUserName, password: repoPassword )
    }

    pom.project {
      description 'An API for data management, analytics, and machine learning on parallel computing clusters.'
      inceptionYear '2014'
      url 'http://cascading.org/'
      scm {
        url 'https://github.com/Cascading/fluid.git'
      }
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }

      artifactId = artifactName
    }
  }

  deployer.pom.whenConfigured { pom ->
    pom.dependencies.removeAll { true }
  }
}
uploadArchives.dependsOn(uploadShadow)

idea {
  module {
    sourceDirs += file( generatedSrc )
  }
}
