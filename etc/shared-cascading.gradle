/*
 * Copyright (c) 2007-2014 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

evaluationDependsOn( ':fluid-generator' )

def generatedSrc = "$buildDir/generated-src"

task fluidGenerator() {

  dependsOn << project( ':fluid-generator' ).classes

  ext.outputDir = generatedSrc; // allows us to set a differing version of Cascading
  ext.include = sourceSets.main.compileClasspath;

  doLast {

    def path = include.asPath

    file( outputDir ).mkdirs()

    javaexec {
      classpath = project( ':fluid-generator' ).sourceSets.main.runtimeClasspath
      main = 'cascading.fluid.generator.Main'
      args = [outputDir, path]
    }
  }
}
compileJava {
  dependsOn << fluidGenerator
  source file( generatedSrc )
}

javadoc {
  source = sourceSets.main.allJava + files( generatedSrc )
  excludes = ["unquietcode"]
  classpath += configurations.provided
}

sourcesJar() {
  from sourceSets.main.allSource + files( generatedSrc )
}

idea {
  module {
    sourceDirs += file( generatedSrc )
  }
}
