/*
 * Copyright (c) 2007-2014 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

evaluationDependsOn( ':fluid-generator' )

def generatedSrc = "$buildDir/generated-src"

dependencies {

  provided group: 'cascading', name: 'cascading-core', version: cascadingVersion
  provided group: 'cascading', name: 'cascading-xml', version: cascadingVersion

  compile group: 'unquietcode.tools.flapi', name: 'flapi-runtime', version: flapiVersion
  compile group: 'org.javassist', name: 'javassist', version: '3.18.2-GA'
  compile group: 'org.reflections', name: 'reflections', version: '0.9.9-RC2'

  compile group: 'com.google.guava', name: 'guava', version: '17.0'

  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'

  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
  compile group: 'log4j', name: 'log4j', version: '1.2.16'

  testCompile group: 'junit', name: 'junit', version: '4.11'
}

project( ':fluid-generator' ).fluidGenerator {
  outputDir = generatedSrc;
}

compileJava {
  dependsOn << project( ':fluid-generator' ).fluidGenerator
  source file( generatedSrc )
}

javadoc {
  source = sourceSets.main.allJava + files( generatedSrc )
  excludes = ["unquietcode"]
  classpath += configurations.provided
}

task sourcesJar( type: Jar, dependsOn: classes ) {
  description = "Package a jar of the Java sources"
  classifier = 'sources'
  from sourceSets.main.allSource + files( generatedSrc )
}

task javadocJar( type: Jar, dependsOn: javadoc ) {
  description = "Package a jar of the javadoc"
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
}

idea {
  module {
    sourceDirs += file( generatedSrc )
  }
}